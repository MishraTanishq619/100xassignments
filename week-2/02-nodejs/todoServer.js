<<<<<<< HEAD
/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  
  app.use(bodyParser.json());
  
  module.exports = app;
=======
// /**
//   You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
//   - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
//   - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

const express = require("express");
const bodyParser = require("body-parser");

const app = express();

app.use(bodyParser.json());

var todos = require("./todos.json");

//   Each todo has a title and a description. The title is a string and the description is a string.
//   Each todo should also get an unique autogenerated id every time it is created
//   The expected API endpoints are defined below,
//   1.GET /todos - Retrieve all todo items
//     Description: Returns a list of all todo items.
//     Response: 200 OK with an array of todo items in JSON format.
//     Example: GET http://localhost:3000/todos

app.get("/", (req, res) => {
  res.send("Welcome to Todo List.");
});

app.get("/todos", (req, res) => {
  res.send(todos);
});

//   2.GET /todos/:id - Retrieve a specific todo item by ID
//     Description: Returns a specific todo item identified by its ID.
//     Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
//     Example: GET http://localhost:3000/todos/123

app.get("/todos/:id", (req, res) => {
  let todoItem = {};
  todos.forEach((i) => {
    if (i.id == req.params.id) {
      res.status(200).send(i);
    }
  });
  res.status(404).send("Not Found.");
});

//   3. POST /todos - Create a new todo item
//     Description: Creates a new todo item.
//     Request Body: JSON object representing the todo item.
//     Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
//     Example: POST http://localhost:3000/todos
//     Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

app.post("/todos", (req, res) => {
  let newid = Math.random(3);
  let b = true;
  do {
    newid += Math.random(3);
    for (const i of todos) {
      if (i.id == newid) {
        b = false;
        break;
      }
    }
  } while (b == false);

  todos.push({
    id: newid,
    title: req.body.title,
    completed: req.body.completed,
    description: req.body.description,
  });
  res.status(201).send({ id: newid });
});

//   4. PUT /todos/:id - Update an existing todo item by ID
//     Description: Updates an existing todo item identified by its ID.
//     Request Body: JSON object representing the updated todo item.
//     Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
//     Example: PUT http://localhost:3000/todos/123
//     Request Body: { "title": "Buy groceries", "completed": true }

app.put("/todos/:id", (req, res) => {
  const b = todos.findIndex((i) => i.id == req.params.id);
  if (b === -1) {
    res.status(404).send();
  }

  todos[b].id = req.params.id;
  todos[b].title = req.body.title;
  todos[b].description = req.body.description;

  res.status(200).json(todos[b]);
});

//   5. DELETE /todos/:id - Delete a todo item by ID
//     Description: Deletes a todo item identified by its ID.
//     Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
//     Example: DELETE http://localhost:3000/todos/123

app.delete("/todos/:id", (req, res) => {
  let b = -1;
  for (let i = 0; i < todos.length; i++) {
    if (todos[i].id == req.params.id) {
      b = i;
      break;
    }
  }
  if (b == -1) {
    res.status(404).send("Not Exists.");
  } else {
    todos.filter((e) => {
      return e.id != req.params.id;
    });
    res.status(200).send("Found and Deleted.");
  }
});

//     - For any other route not defined in the server return 404

//   Testing the server - run `npm run test-todoServer` command in terminal
//  */

// app.use((req, res) => {
//   res.status(404).send("Route not found");
// });

// app.listen(3000, () => {
//   console.log(`Example app listening on port 3000`);
// });

module.exports = app;
>>>>>>> 6590e11 (23/2/24)
